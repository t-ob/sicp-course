#+TITLE: Homework 0
#+OPTIONS: toc:nil
* Obtain a copy of SICP
  SICP is available both in [[http://www.amazon.co.uk/Structure-Interpretation-Computer-Electrical-Engineering/dp/0262510871/ref%3Dsr_1_1?ie%3DUTF8&qid%3D1385586049&sr%3D8-1&keywords%3Dstructure%2Band%2Binterpretation%2Bof%2Bcomputer%2Bprograms][physical]] and [[https://mitpress.mit.edu/sicp/full-text/book/book.html][electronic]] forms.  The latter
  is freely available and is licensed under a Creative Commons
  NonCommercial License.

  Download (or order!) a copy of the text, and read [[https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-9.html#%25_chap_1][the introduction to Section 1]].
* Set up your development environment
  Lisp has many dialects, e.g. Common Lisp, Clojure (Lisp on the JVM), GOOL
  (developed at Naughty Dog and [[http://all-things-andy-gavin.com/2011/03/12/making-crash-bandicoot-gool-part-9/][used in the development of the Crash Bandicoot series of games]])
  and Scheme, the dialect used in this course.  Scheme itself comes in many different flavours,
  and each flavour has its own quirks and installation process.

  The suggested flavour of Scheme used in this course is [[https://www.gnu.org/software/mit-scheme/][MIT/GNU Scheme]], though [[http://racket-lang.org/][Racket]] is also
  a popular choice.  Both have their own associated development environments,
  and this part of the homework is to get you set-up with one of them.  Alternatively,
  both Emacs and Vim support integration with a running MIT/GNU Scheme or Racket process.
** MIT/GNU Scheme
   + [[https://www.gnu.org/software/mit-scheme/][Download]] MIT/GNU Scheme for your development platform.
   + Install and open the MIT/GNU Scheme implementation either from
     the installed Application or by running
     #+BEGIN_SRC shell
       mit-scheme --edit
     #+END_SRC
     at the command line.
   + You are now in Edwin, the MIT/GNU Scheme editor. It is very
     similar to Emacs, though written in Scheme.  If this is the first
     time in an Emacs-like environment, enter and complete the
     interactive tutorial by executing the key-chord =Ctrl-h t= (Emacs
     and Edwin abbreviate this to =C-h t=.
** Racket
   + [[http://racket-lang.org/download/][Download]] Racket for your development platform.
   + Open the installed DrRacket application for a Racket development
     environment.
   + *Important*: Racket departs from Scheme in certain ways that make
     some of the exercises in SICP impossible.  This can be remedied
     by adding
     #+BEGIN_SRC scheme
       #lang planet neil/sicp
     #+END_SRC
     to the top of any Scheme file you're editing (cf. [[http://www.neilvandyke.org/racket-sicp/][Neil Van Dyke]]'s
     page for more details).  The first time you run a program with
     this header, DrRacket will download the required packages.
